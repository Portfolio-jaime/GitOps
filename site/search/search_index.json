{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"GitOps Demo Project \u00b6 Proyecto de demostraci\u00f3n que implementa un pipeline completo de GitOps utilizando Kubernetes, GitHub Actions y ArgoCD. \ud83c\udfaf Objetivo \u00b6 Demostrar la implementaci\u00f3n de un flujo de trabajo GitOps completo para una aplicaci\u00f3n web simple, incluyendo: - Automatizaci\u00f3n de CI/CD con GitHub Actions - Containerizaci\u00f3n con Docker - Despliegue en Kubernetes - Gesti\u00f3n de configuraci\u00f3n con ArgoCD \ud83c\udfd7\ufe0f Arquitectura \u00b6 1 2 3 4 5 6 graph LR A[C\u00f3digo Fuente] --> B[GitHub Actions] B --> C[Docker Registry] C --> D[ArgoCD] D --> E[Kubernetes Cluster] E --> F[Aplicaci\u00f3n Desplegada] \ud83d\udce6 Componentes \u00b6 1. Aplicaci\u00f3n Web \u00b6 Tecnolog\u00eda : HTML est\u00e1tico Contenedor : Docker con Nginx Puerto : 80 2. CI/CD Pipeline \u00b6 Plataforma : GitHub Actions Trigger : Push a main branch Acciones : Build de imagen Docker Push a registry Actualizaci\u00f3n de manifiestos K8s 3. Infraestructura Kubernetes \u00b6 Deployment : Gesti\u00f3n de pods de la aplicaci\u00f3n Service : Exposici\u00f3n de la aplicaci\u00f3n Ingress : Routing externo (opcional) 4. GitOps con ArgoCD \u00b6 Monitoreo : Repositorio de manifiestos Sincronizaci\u00f3n : Autom\u00e1tica Rollback : Capacidad de volver a versiones anteriores \ud83d\ude80 Estructura del Proyecto \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 GitOps/ \u251c\u2500\u2500 .github/ \u2502 \u2514\u2500\u2500 workflows/ \u2502 \u2514\u2500\u2500 cd.yml # Pipeline CI/CD \u251c\u2500\u2500 Docker/ \u2502 \u251c\u2500\u2500 Dockerfile # Imagen de la aplicaci\u00f3n \u2502 \u2514\u2500\u2500 index.html # Aplicaci\u00f3n web \u251c\u2500\u2500 Kubernetes/ \u2502 \u251c\u2500\u2500 deployment.yaml # Deployment de K8s \u2502 \u2514\u2500\u2500 service.yaml # Service de K8s \u251c\u2500\u2500 doc/ # Documentaci\u00f3n y diagramas \u2514\u2500\u2500 README.md \u26a1 Quick Start \u00b6 Prerrequisitos \u00b6 Cluster de Kubernetes kubectl configurado ArgoCD instalado Acceso a Docker Registry 1. Clonar Repositorio \u00b6 1 2 git clone https://github.com/Portfolio-jaime/GitOps.git cd GitOps 2. Desplegar en Kubernetes \u00b6 1 2 3 4 5 # Aplicar manifiestos kubectl apply -f Kubernetes/ # Verificar despliegue kubectl get pods,svc 3. Configurar ArgoCD \u00b6 1 2 3 4 5 6 # Crear aplicaci\u00f3n en ArgoCD argocd app create gitops-demo \\ --repo https://github.com/Portfolio-jaime/GitOps.git \\ --path Kubernetes \\ --dest-server https://kubernetes.default.svc \\ --dest-namespace default \ud83d\udd27 Configuraci\u00f3n CI/CD \u00b6 El pipeline de GitHub Actions automatiza: Build : Construcci\u00f3n de imagen Docker Test : Validaciones de seguridad y calidad Push : Subida a Docker Registry Deploy : Actualizaci\u00f3n de manifiestos K8s Variables de Entorno Requeridas \u00b6 1 2 3 4 DOCKER_REGISTRY : registry.example.com DOCKER_USERNAME : user DOCKER_PASSWORD : password KUBECONFIG : base64-encoded-kubeconfig \ud83d\udd04 Flujo GitOps \u00b6 1. Desarrollo \u00b6 1 2 3 4 5 6 7 # Modificar aplicaci\u00f3n echo \"<h1>Nueva versi\u00f3n</h1>\" > Docker/index.html # Commit y push git add . git commit -m \"feat: nueva versi\u00f3n de la aplicaci\u00f3n\" git push origin main 2. CI/CD Autom\u00e1tico \u00b6 GitHub Actions detecta el cambio Construye nueva imagen Docker Actualiza manifiestos con nueva imagen ArgoCD detecta cambios en Git 3. Despliegue \u00b6 ArgoCD sincroniza autom\u00e1ticamente Kubernetes aplica nuevos manifiestos Aplicaci\u00f3n se actualiza sin downtime \ud83d\udcca Monitoreo \u00b6 Estado de la Aplicaci\u00f3n \u00b6 1 2 3 4 5 6 7 8 # Verificar pods kubectl get pods -l app = gitops-demo # Ver logs kubectl logs -l app = gitops-demo --tail = 50 # Estado del servicio kubectl get svc gitops-demo ArgoCD Dashboard \u00b6 Acceder a la UI de ArgoCD Verificar estado de sincronizaci\u00f3n Revisar historial de despliegues \ud83d\udee0\ufe0f Troubleshooting \u00b6 Problemas Comunes \u00b6 1. Imagen no se actualiza \u00b6 1 2 3 4 5 # Verificar el tag de la imagen kubectl describe deployment gitops-demo # Forzar actualizaci\u00f3n kubectl rollout restart deployment/gitops-demo 2. ArgoCD no sincroniza \u00b6 1 2 3 4 5 # Verificar configuraci\u00f3n de la app argocd app get gitops-demo # Sincronizaci\u00f3n manual argocd app sync gitops-demo 3. Problemas de red \u00b6 1 2 3 4 5 # Verificar service y endpoints kubectl get svc,endpoints # Probar conectividad kubectl port-forward svc/gitops-demo 8080 :80 \ud83c\udfaf Casos de Uso \u00b6 Entornos de Desarrollo \u00b6 Desarrollo Local : Docker Compose para desarrollo Testing : Namespace dedicado en K8s Staging : Entorno de pre-producci\u00f3n Producci\u00f3n \u00b6 Blue/Green : Despliegues sin downtime Canary : Despliegues graduales Rollback : Vuelta r\u00e1pida a versiones anteriores \ud83d\udcc8 M\u00e9tricas y Observabilidad \u00b6 M\u00e9tricas de Aplicaci\u00f3n \u00b6 Tiempo de respuesta Throughput de requests Errores HTTP M\u00e9tricas de Infraestructura \u00b6 Uso de CPU y memoria Estado de pods Latencia de red \ud83d\udd10 Seguridad \u00b6 Pr\u00e1cticas Implementadas \u00b6 Im\u00e1genes : Scan de vulnerabilidades Secrets : Gesti\u00f3n segura con K8s secrets RBAC : Control de acceso en ArgoCD Network Policies : Seguridad de red \ud83d\udcda Recursos Adicionales \u00b6 Gu\u00eda de Prerequisites Setup Detallado Arquitectura Completa Configuraci\u00f3n de ArgoCD Troubleshooting \ud83d\udc65 Contribuir \u00b6 Este proyecto es parte del portfolio de DevOps y est\u00e1 abierto a contribuciones: Fork del repositorio Crear feature branch Commit cambios Push a la branch Crear Pull Request \ud83d\udcde Contacto \u00b6 Autor: Jaime Henao Email: jaime.andres.henao.arbelaez@ba.com Organizaci\u00f3n: British Airways DevOps Team GitHub: @Portfolio-jaime Proyecto de Demostraci\u00f3n GitOps - DevOps Engineering Portfolio","title":"Home"},{"location":"#gitops-demo-project","text":"Proyecto de demostraci\u00f3n que implementa un pipeline completo de GitOps utilizando Kubernetes, GitHub Actions y ArgoCD.","title":"GitOps Demo Project"},{"location":"#objetivo","text":"Demostrar la implementaci\u00f3n de un flujo de trabajo GitOps completo para una aplicaci\u00f3n web simple, incluyendo: - Automatizaci\u00f3n de CI/CD con GitHub Actions - Containerizaci\u00f3n con Docker - Despliegue en Kubernetes - Gesti\u00f3n de configuraci\u00f3n con ArgoCD","title":"\ud83c\udfaf Objetivo"},{"location":"#arquitectura","text":"1 2 3 4 5 6 graph LR A[C\u00f3digo Fuente] --> B[GitHub Actions] B --> C[Docker Registry] C --> D[ArgoCD] D --> E[Kubernetes Cluster] E --> F[Aplicaci\u00f3n Desplegada]","title":"\ud83c\udfd7\ufe0f Arquitectura"},{"location":"#componentes","text":"","title":"\ud83d\udce6 Componentes"},{"location":"#1-aplicacion-web","text":"Tecnolog\u00eda : HTML est\u00e1tico Contenedor : Docker con Nginx Puerto : 80","title":"1. Aplicaci\u00f3n Web"},{"location":"#2-cicd-pipeline","text":"Plataforma : GitHub Actions Trigger : Push a main branch Acciones : Build de imagen Docker Push a registry Actualizaci\u00f3n de manifiestos K8s","title":"2. CI/CD Pipeline"},{"location":"#3-infraestructura-kubernetes","text":"Deployment : Gesti\u00f3n de pods de la aplicaci\u00f3n Service : Exposici\u00f3n de la aplicaci\u00f3n Ingress : Routing externo (opcional)","title":"3. Infraestructura Kubernetes"},{"location":"#4-gitops-con-argocd","text":"Monitoreo : Repositorio de manifiestos Sincronizaci\u00f3n : Autom\u00e1tica Rollback : Capacidad de volver a versiones anteriores","title":"4. GitOps con ArgoCD"},{"location":"#estructura-del-proyecto","text":"1 2 3 4 5 6 7 8 9 10 11 12 GitOps/ \u251c\u2500\u2500 .github/ \u2502 \u2514\u2500\u2500 workflows/ \u2502 \u2514\u2500\u2500 cd.yml # Pipeline CI/CD \u251c\u2500\u2500 Docker/ \u2502 \u251c\u2500\u2500 Dockerfile # Imagen de la aplicaci\u00f3n \u2502 \u2514\u2500\u2500 index.html # Aplicaci\u00f3n web \u251c\u2500\u2500 Kubernetes/ \u2502 \u251c\u2500\u2500 deployment.yaml # Deployment de K8s \u2502 \u2514\u2500\u2500 service.yaml # Service de K8s \u251c\u2500\u2500 doc/ # Documentaci\u00f3n y diagramas \u2514\u2500\u2500 README.md","title":"\ud83d\ude80 Estructura del Proyecto"},{"location":"#quick-start","text":"","title":"\u26a1 Quick Start"},{"location":"#prerrequisitos","text":"Cluster de Kubernetes kubectl configurado ArgoCD instalado Acceso a Docker Registry","title":"Prerrequisitos"},{"location":"#1-clonar-repositorio","text":"1 2 git clone https://github.com/Portfolio-jaime/GitOps.git cd GitOps","title":"1. Clonar Repositorio"},{"location":"#2-desplegar-en-kubernetes","text":"1 2 3 4 5 # Aplicar manifiestos kubectl apply -f Kubernetes/ # Verificar despliegue kubectl get pods,svc","title":"2. Desplegar en Kubernetes"},{"location":"#3-configurar-argocd","text":"1 2 3 4 5 6 # Crear aplicaci\u00f3n en ArgoCD argocd app create gitops-demo \\ --repo https://github.com/Portfolio-jaime/GitOps.git \\ --path Kubernetes \\ --dest-server https://kubernetes.default.svc \\ --dest-namespace default","title":"3. Configurar ArgoCD"},{"location":"#configuracion-cicd","text":"El pipeline de GitHub Actions automatiza: Build : Construcci\u00f3n de imagen Docker Test : Validaciones de seguridad y calidad Push : Subida a Docker Registry Deploy : Actualizaci\u00f3n de manifiestos K8s","title":"\ud83d\udd27 Configuraci\u00f3n CI/CD"},{"location":"#variables-de-entorno-requeridas","text":"1 2 3 4 DOCKER_REGISTRY : registry.example.com DOCKER_USERNAME : user DOCKER_PASSWORD : password KUBECONFIG : base64-encoded-kubeconfig","title":"Variables de Entorno Requeridas"},{"location":"#flujo-gitops","text":"","title":"\ud83d\udd04 Flujo GitOps"},{"location":"#1-desarrollo","text":"1 2 3 4 5 6 7 # Modificar aplicaci\u00f3n echo \"<h1>Nueva versi\u00f3n</h1>\" > Docker/index.html # Commit y push git add . git commit -m \"feat: nueva versi\u00f3n de la aplicaci\u00f3n\" git push origin main","title":"1. Desarrollo"},{"location":"#2-cicd-automatico","text":"GitHub Actions detecta el cambio Construye nueva imagen Docker Actualiza manifiestos con nueva imagen ArgoCD detecta cambios en Git","title":"2. CI/CD Autom\u00e1tico"},{"location":"#3-despliegue","text":"ArgoCD sincroniza autom\u00e1ticamente Kubernetes aplica nuevos manifiestos Aplicaci\u00f3n se actualiza sin downtime","title":"3. Despliegue"},{"location":"#monitoreo","text":"","title":"\ud83d\udcca Monitoreo"},{"location":"#estado-de-la-aplicacion","text":"1 2 3 4 5 6 7 8 # Verificar pods kubectl get pods -l app = gitops-demo # Ver logs kubectl logs -l app = gitops-demo --tail = 50 # Estado del servicio kubectl get svc gitops-demo","title":"Estado de la Aplicaci\u00f3n"},{"location":"#argocd-dashboard","text":"Acceder a la UI de ArgoCD Verificar estado de sincronizaci\u00f3n Revisar historial de despliegues","title":"ArgoCD Dashboard"},{"location":"#troubleshooting","text":"","title":"\ud83d\udee0\ufe0f Troubleshooting"},{"location":"#problemas-comunes","text":"","title":"Problemas Comunes"},{"location":"#1-imagen-no-se-actualiza","text":"1 2 3 4 5 # Verificar el tag de la imagen kubectl describe deployment gitops-demo # Forzar actualizaci\u00f3n kubectl rollout restart deployment/gitops-demo","title":"1. Imagen no se actualiza"},{"location":"#2-argocd-no-sincroniza","text":"1 2 3 4 5 # Verificar configuraci\u00f3n de la app argocd app get gitops-demo # Sincronizaci\u00f3n manual argocd app sync gitops-demo","title":"2. ArgoCD no sincroniza"},{"location":"#3-problemas-de-red","text":"1 2 3 4 5 # Verificar service y endpoints kubectl get svc,endpoints # Probar conectividad kubectl port-forward svc/gitops-demo 8080 :80","title":"3. Problemas de red"},{"location":"#casos-de-uso","text":"","title":"\ud83c\udfaf Casos de Uso"},{"location":"#entornos-de-desarrollo","text":"Desarrollo Local : Docker Compose para desarrollo Testing : Namespace dedicado en K8s Staging : Entorno de pre-producci\u00f3n","title":"Entornos de Desarrollo"},{"location":"#produccion","text":"Blue/Green : Despliegues sin downtime Canary : Despliegues graduales Rollback : Vuelta r\u00e1pida a versiones anteriores","title":"Producci\u00f3n"},{"location":"#metricas-y-observabilidad","text":"","title":"\ud83d\udcc8 M\u00e9tricas y Observabilidad"},{"location":"#metricas-de-aplicacion","text":"Tiempo de respuesta Throughput de requests Errores HTTP","title":"M\u00e9tricas de Aplicaci\u00f3n"},{"location":"#metricas-de-infraestructura","text":"Uso de CPU y memoria Estado de pods Latencia de red","title":"M\u00e9tricas de Infraestructura"},{"location":"#seguridad","text":"","title":"\ud83d\udd10 Seguridad"},{"location":"#practicas-implementadas","text":"Im\u00e1genes : Scan de vulnerabilidades Secrets : Gesti\u00f3n segura con K8s secrets RBAC : Control de acceso en ArgoCD Network Policies : Seguridad de red","title":"Pr\u00e1cticas Implementadas"},{"location":"#recursos-adicionales","text":"Gu\u00eda de Prerequisites Setup Detallado Arquitectura Completa Configuraci\u00f3n de ArgoCD Troubleshooting","title":"\ud83d\udcda Recursos Adicionales"},{"location":"#contribuir","text":"Este proyecto es parte del portfolio de DevOps y est\u00e1 abierto a contribuciones: Fork del repositorio Crear feature branch Commit cambios Push a la branch Crear Pull Request","title":"\ud83d\udc65 Contribuir"},{"location":"#contacto","text":"Autor: Jaime Henao Email: jaime.andres.henao.arbelaez@ba.com Organizaci\u00f3n: British Airways DevOps Team GitHub: @Portfolio-jaime Proyecto de Demostraci\u00f3n GitOps - DevOps Engineering Portfolio","title":"\ud83d\udcde Contacto"}]}