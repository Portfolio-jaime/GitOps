{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"GitOps Demo Project \u00b6 Proyecto de demostraci\u00f3n que implementa un pipeline completo de GitOps utilizando Kubernetes, GitHub Actions y ArgoCD. \ud83c\udfaf Objetivo \u00b6 Demostrar la implementaci\u00f3n de un flujo de trabajo GitOps completo para una aplicaci\u00f3n web simple, incluyendo: - Automatizaci\u00f3n de CI/CD con GitHub Actions - Containerizaci\u00f3n con Docker - Despliegue en Kubernetes - Gesti\u00f3n de configuraci\u00f3n con ArgoCD \ud83c\udfd7\ufe0f Arquitectura \u00b6 1 2 3 4 5 6 graph LR A[C\u00f3digo Fuente] --> B[GitHub Actions] B --> C[Docker Registry] C --> D[ArgoCD] D --> E[Kubernetes Cluster] E --> F[Aplicaci\u00f3n Desplegada] \ud83d\udce6 Componentes \u00b6 1. Aplicaci\u00f3n Web \u00b6 Tecnolog\u00eda : HTML est\u00e1tico Contenedor : Docker con Nginx Puerto : 80 2. CI/CD Pipeline \u00b6 Plataforma : GitHub Actions Trigger : Push a main branch Acciones : Build de imagen Docker Push a registry Actualizaci\u00f3n de manifiestos K8s 3. Infraestructura Kubernetes \u00b6 Deployment : Gesti\u00f3n de pods de la aplicaci\u00f3n Service : Exposici\u00f3n de la aplicaci\u00f3n Ingress : Routing externo (opcional) 4. GitOps con ArgoCD \u00b6 Monitoreo : Repositorio de manifiestos Sincronizaci\u00f3n : Autom\u00e1tica Rollback : Capacidad de volver a versiones anteriores \ud83d\ude80 Estructura del Proyecto \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 GitOps/ \u251c\u2500\u2500 .github/ \u2502 \u2514\u2500\u2500 workflows/ \u2502 \u2514\u2500\u2500 cd.yml # Pipeline CI/CD \u251c\u2500\u2500 Docker/ \u2502 \u251c\u2500\u2500 Dockerfile # Imagen de la aplicaci\u00f3n \u2502 \u2514\u2500\u2500 index.html # Aplicaci\u00f3n web \u251c\u2500\u2500 Kubernetes/ \u2502 \u251c\u2500\u2500 deployment.yaml # Deployment de K8s \u2502 \u2514\u2500\u2500 service.yaml # Service de K8s \u251c\u2500\u2500 doc/ # Documentaci\u00f3n y diagramas \u2514\u2500\u2500 README.md \u26a1 Quick Start \u00b6 Prerrequisitos \u00b6 Cluster de Kubernetes kubectl configurado ArgoCD instalado Acceso a Docker Registry 1. Clonar Repositorio \u00b6 1 2 git clone https://github.com/Portfolio-jaime/GitOps.git cd GitOps 2. Desplegar en Kubernetes \u00b6 1 2 3 4 5 # Aplicar manifiestos kubectl apply -f Kubernetes/ # Verificar despliegue kubectl get pods,svc 3. Configurar ArgoCD \u00b6 1 2 3 4 5 6 # Crear aplicaci\u00f3n en ArgoCD argocd app create gitops-demo \\ --repo https://github.com/Portfolio-jaime/GitOps.git \\ --path Kubernetes \\ --dest-server https://kubernetes.default.svc \\ --dest-namespace default \ud83d\udd27 Configuraci\u00f3n CI/CD \u00b6 El pipeline de GitHub Actions automatiza: Build : Construcci\u00f3n de imagen Docker Test : Validaciones de seguridad y calidad Push : Subida a Docker Registry Deploy : Actualizaci\u00f3n de manifiestos K8s Variables de Entorno Requeridas \u00b6 1 2 3 4 DOCKER_REGISTRY : registry.example.com DOCKER_USERNAME : user DOCKER_PASSWORD : password KUBECONFIG : base64-encoded-kubeconfig \ud83d\udd04 Flujo GitOps \u00b6 1. Desarrollo \u00b6 1 2 3 4 5 6 7 # Modificar aplicaci\u00f3n echo \"<h1>Nueva versi\u00f3n</h1>\" > Docker/index.html # Commit y push git add . git commit -m \"feat: nueva versi\u00f3n de la aplicaci\u00f3n\" git push origin main 2. CI/CD Autom\u00e1tico \u00b6 GitHub Actions detecta el cambio Construye nueva imagen Docker Actualiza manifiestos con nueva imagen ArgoCD detecta cambios en Git 3. Despliegue \u00b6 ArgoCD sincroniza autom\u00e1ticamente Kubernetes aplica nuevos manifiestos Aplicaci\u00f3n se actualiza sin downtime \ud83d\udcca Monitoreo \u00b6 Estado de la Aplicaci\u00f3n \u00b6 1 2 3 4 5 6 7 8 # Verificar pods kubectl get pods -l app = gitops-demo # Ver logs kubectl logs -l app = gitops-demo --tail = 50 # Estado del servicio kubectl get svc gitops-demo ArgoCD Dashboard \u00b6 Acceder a la UI de ArgoCD Verificar estado de sincronizaci\u00f3n Revisar historial de despliegues \ud83d\udee0\ufe0f Troubleshooting \u00b6 Problemas Comunes \u00b6 1. Imagen no se actualiza \u00b6 1 2 3 4 5 # Verificar el tag de la imagen kubectl describe deployment gitops-demo # Forzar actualizaci\u00f3n kubectl rollout restart deployment/gitops-demo 2. ArgoCD no sincroniza \u00b6 1 2 3 4 5 # Verificar configuraci\u00f3n de la app argocd app get gitops-demo # Sincronizaci\u00f3n manual argocd app sync gitops-demo 3. Problemas de red \u00b6 1 2 3 4 5 # Verificar service y endpoints kubectl get svc,endpoints # Probar conectividad kubectl port-forward svc/gitops-demo 8080 :80 \ud83c\udfaf Casos de Uso \u00b6 Entornos de Desarrollo \u00b6 Desarrollo Local : Docker Compose para desarrollo Testing : Namespace dedicado en K8s Staging : Entorno de pre-producci\u00f3n Producci\u00f3n \u00b6 Blue/Green : Despliegues sin downtime Canary : Despliegues graduales Rollback : Vuelta r\u00e1pida a versiones anteriores \ud83d\udcc8 M\u00e9tricas y Observabilidad \u00b6 M\u00e9tricas de Aplicaci\u00f3n \u00b6 Tiempo de respuesta Throughput de requests Errores HTTP M\u00e9tricas de Infraestructura \u00b6 Uso de CPU y memoria Estado de pods Latencia de red \ud83d\udd10 Seguridad \u00b6 Pr\u00e1cticas Implementadas \u00b6 Im\u00e1genes : Scan de vulnerabilidades Secrets : Gesti\u00f3n segura con K8s secrets RBAC : Control de acceso en ArgoCD Network Policies : Seguridad de red \ud83d\udcda Recursos Adicionales \u00b6 Gu\u00eda de Prerequisites Setup Detallado Arquitectura Completa Configuraci\u00f3n de ArgoCD Troubleshooting \ud83d\udc65 Contribuir \u00b6 Este proyecto es parte del portfolio de DevOps y est\u00e1 abierto a contribuciones: Fork del repositorio Crear feature branch Commit cambios Push a la branch Crear Pull Request \ud83d\udcde Contacto \u00b6 Autor: Jaime Henao Email: jaime.andres.henao.arbelaez@ba.com Organizaci\u00f3n: British Airways DevOps Team GitHub: @Portfolio-jaime Proyecto de Demostraci\u00f3n GitOps - DevOps Engineering Portfolio","title":"Home"},{"location":"#gitops-demo-project","text":"Proyecto de demostraci\u00f3n que implementa un pipeline completo de GitOps utilizando Kubernetes, GitHub Actions y ArgoCD.","title":"GitOps Demo Project"},{"location":"#objetivo","text":"Demostrar la implementaci\u00f3n de un flujo de trabajo GitOps completo para una aplicaci\u00f3n web simple, incluyendo: - Automatizaci\u00f3n de CI/CD con GitHub Actions - Containerizaci\u00f3n con Docker - Despliegue en Kubernetes - Gesti\u00f3n de configuraci\u00f3n con ArgoCD","title":"\ud83c\udfaf Objetivo"},{"location":"#arquitectura","text":"1 2 3 4 5 6 graph LR A[C\u00f3digo Fuente] --> B[GitHub Actions] B --> C[Docker Registry] C --> D[ArgoCD] D --> E[Kubernetes Cluster] E --> F[Aplicaci\u00f3n Desplegada]","title":"\ud83c\udfd7\ufe0f Arquitectura"},{"location":"#componentes","text":"","title":"\ud83d\udce6 Componentes"},{"location":"#1-aplicacion-web","text":"Tecnolog\u00eda : HTML est\u00e1tico Contenedor : Docker con Nginx Puerto : 80","title":"1. Aplicaci\u00f3n Web"},{"location":"#2-cicd-pipeline","text":"Plataforma : GitHub Actions Trigger : Push a main branch Acciones : Build de imagen Docker Push a registry Actualizaci\u00f3n de manifiestos K8s","title":"2. CI/CD Pipeline"},{"location":"#3-infraestructura-kubernetes","text":"Deployment : Gesti\u00f3n de pods de la aplicaci\u00f3n Service : Exposici\u00f3n de la aplicaci\u00f3n Ingress : Routing externo (opcional)","title":"3. Infraestructura Kubernetes"},{"location":"#4-gitops-con-argocd","text":"Monitoreo : Repositorio de manifiestos Sincronizaci\u00f3n : Autom\u00e1tica Rollback : Capacidad de volver a versiones anteriores","title":"4. GitOps con ArgoCD"},{"location":"#estructura-del-proyecto","text":"1 2 3 4 5 6 7 8 9 10 11 12 GitOps/ \u251c\u2500\u2500 .github/ \u2502 \u2514\u2500\u2500 workflows/ \u2502 \u2514\u2500\u2500 cd.yml # Pipeline CI/CD \u251c\u2500\u2500 Docker/ \u2502 \u251c\u2500\u2500 Dockerfile # Imagen de la aplicaci\u00f3n \u2502 \u2514\u2500\u2500 index.html # Aplicaci\u00f3n web \u251c\u2500\u2500 Kubernetes/ \u2502 \u251c\u2500\u2500 deployment.yaml # Deployment de K8s \u2502 \u2514\u2500\u2500 service.yaml # Service de K8s \u251c\u2500\u2500 doc/ # Documentaci\u00f3n y diagramas \u2514\u2500\u2500 README.md","title":"\ud83d\ude80 Estructura del Proyecto"},{"location":"#quick-start","text":"","title":"\u26a1 Quick Start"},{"location":"#prerrequisitos","text":"Cluster de Kubernetes kubectl configurado ArgoCD instalado Acceso a Docker Registry","title":"Prerrequisitos"},{"location":"#1-clonar-repositorio","text":"1 2 git clone https://github.com/Portfolio-jaime/GitOps.git cd GitOps","title":"1. Clonar Repositorio"},{"location":"#2-desplegar-en-kubernetes","text":"1 2 3 4 5 # Aplicar manifiestos kubectl apply -f Kubernetes/ # Verificar despliegue kubectl get pods,svc","title":"2. Desplegar en Kubernetes"},{"location":"#3-configurar-argocd","text":"1 2 3 4 5 6 # Crear aplicaci\u00f3n en ArgoCD argocd app create gitops-demo \\ --repo https://github.com/Portfolio-jaime/GitOps.git \\ --path Kubernetes \\ --dest-server https://kubernetes.default.svc \\ --dest-namespace default","title":"3. Configurar ArgoCD"},{"location":"#configuracion-cicd","text":"El pipeline de GitHub Actions automatiza: Build : Construcci\u00f3n de imagen Docker Test : Validaciones de seguridad y calidad Push : Subida a Docker Registry Deploy : Actualizaci\u00f3n de manifiestos K8s","title":"\ud83d\udd27 Configuraci\u00f3n CI/CD"},{"location":"#variables-de-entorno-requeridas","text":"1 2 3 4 DOCKER_REGISTRY : registry.example.com DOCKER_USERNAME : user DOCKER_PASSWORD : password KUBECONFIG : base64-encoded-kubeconfig","title":"Variables de Entorno Requeridas"},{"location":"#flujo-gitops","text":"","title":"\ud83d\udd04 Flujo GitOps"},{"location":"#1-desarrollo","text":"1 2 3 4 5 6 7 # Modificar aplicaci\u00f3n echo \"<h1>Nueva versi\u00f3n</h1>\" > Docker/index.html # Commit y push git add . git commit -m \"feat: nueva versi\u00f3n de la aplicaci\u00f3n\" git push origin main","title":"1. Desarrollo"},{"location":"#2-cicd-automatico","text":"GitHub Actions detecta el cambio Construye nueva imagen Docker Actualiza manifiestos con nueva imagen ArgoCD detecta cambios en Git","title":"2. CI/CD Autom\u00e1tico"},{"location":"#3-despliegue","text":"ArgoCD sincroniza autom\u00e1ticamente Kubernetes aplica nuevos manifiestos Aplicaci\u00f3n se actualiza sin downtime","title":"3. Despliegue"},{"location":"#monitoreo","text":"","title":"\ud83d\udcca Monitoreo"},{"location":"#estado-de-la-aplicacion","text":"1 2 3 4 5 6 7 8 # Verificar pods kubectl get pods -l app = gitops-demo # Ver logs kubectl logs -l app = gitops-demo --tail = 50 # Estado del servicio kubectl get svc gitops-demo","title":"Estado de la Aplicaci\u00f3n"},{"location":"#argocd-dashboard","text":"Acceder a la UI de ArgoCD Verificar estado de sincronizaci\u00f3n Revisar historial de despliegues","title":"ArgoCD Dashboard"},{"location":"#troubleshooting","text":"","title":"\ud83d\udee0\ufe0f Troubleshooting"},{"location":"#problemas-comunes","text":"","title":"Problemas Comunes"},{"location":"#1-imagen-no-se-actualiza","text":"1 2 3 4 5 # Verificar el tag de la imagen kubectl describe deployment gitops-demo # Forzar actualizaci\u00f3n kubectl rollout restart deployment/gitops-demo","title":"1. Imagen no se actualiza"},{"location":"#2-argocd-no-sincroniza","text":"1 2 3 4 5 # Verificar configuraci\u00f3n de la app argocd app get gitops-demo # Sincronizaci\u00f3n manual argocd app sync gitops-demo","title":"2. ArgoCD no sincroniza"},{"location":"#3-problemas-de-red","text":"1 2 3 4 5 # Verificar service y endpoints kubectl get svc,endpoints # Probar conectividad kubectl port-forward svc/gitops-demo 8080 :80","title":"3. Problemas de red"},{"location":"#casos-de-uso","text":"","title":"\ud83c\udfaf Casos de Uso"},{"location":"#entornos-de-desarrollo","text":"Desarrollo Local : Docker Compose para desarrollo Testing : Namespace dedicado en K8s Staging : Entorno de pre-producci\u00f3n","title":"Entornos de Desarrollo"},{"location":"#produccion","text":"Blue/Green : Despliegues sin downtime Canary : Despliegues graduales Rollback : Vuelta r\u00e1pida a versiones anteriores","title":"Producci\u00f3n"},{"location":"#metricas-y-observabilidad","text":"","title":"\ud83d\udcc8 M\u00e9tricas y Observabilidad"},{"location":"#metricas-de-aplicacion","text":"Tiempo de respuesta Throughput de requests Errores HTTP","title":"M\u00e9tricas de Aplicaci\u00f3n"},{"location":"#metricas-de-infraestructura","text":"Uso de CPU y memoria Estado de pods Latencia de red","title":"M\u00e9tricas de Infraestructura"},{"location":"#seguridad","text":"","title":"\ud83d\udd10 Seguridad"},{"location":"#practicas-implementadas","text":"Im\u00e1genes : Scan de vulnerabilidades Secrets : Gesti\u00f3n segura con K8s secrets RBAC : Control de acceso en ArgoCD Network Policies : Seguridad de red","title":"Pr\u00e1cticas Implementadas"},{"location":"#recursos-adicionales","text":"Gu\u00eda de Prerequisites Setup Detallado Arquitectura Completa Configuraci\u00f3n de ArgoCD Troubleshooting","title":"\ud83d\udcda Recursos Adicionales"},{"location":"#contribuir","text":"Este proyecto es parte del portfolio de DevOps y est\u00e1 abierto a contribuciones: Fork del repositorio Crear feature branch Commit cambios Push a la branch Crear Pull Request","title":"\ud83d\udc65 Contribuir"},{"location":"#contacto","text":"Autor: Jaime Henao Email: jaime.andres.henao.arbelaez@ba.com Organizaci\u00f3n: British Airways DevOps Team GitHub: @Portfolio-jaime Proyecto de Demostraci\u00f3n GitOps - DevOps Engineering Portfolio","title":"\ud83d\udcde Contacto"},{"location":"prerequisites/","text":"Prerequisites \u00b6 Requirements and setup needed before running the GitOps demo project. \ud83d\udda5\ufe0f System Requirements \u00b6 Hardware Requirements \u00b6 CPU : 2+ cores (4+ recommended) RAM : 4GB minimum (8GB recommended) Storage : 10GB available space Network : Internet connection for downloading images Operating System Support \u00b6 Linux : Ubuntu 18.04+, CentOS 7+, Debian 9+ macOS : 10.14 Mojave or later Windows : Windows 10 with WSL2 \ud83d\udee0\ufe0f Required Tools \u00b6 Essential Tools \u00b6 Tool Version Purpose Installation Docker 20.0+ Container runtime Docker Install kubectl 1.25+ Kubernetes CLI kubectl Install Git 2.20+ Version control Git Install Kubernetes Cluster \u00b6 Choose one of the following options: Option 1: Minikube (Recommended for Demo) \u00b6 1 2 3 4 5 6 7 # Install Minikube curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 sudo install minikube-linux-amd64 /usr/local/bin/minikube # Start cluster minikube start --memory = 4096 --cpus = 2 minikube status Option 2: Docker Desktop \u00b6 1 2 3 # Enable Kubernetes in Docker Desktop # Settings \u2192 Kubernetes \u2192 Enable Kubernetes kubectl cluster-info Option 3: Cloud Kubernetes \u00b6 EKS (AWS): EKS Getting Started GKE (Google): GKE Quickstart AKS (Azure): AKS Quickstart CI/CD Tools \u00b6 GitHub Actions (Included) \u00b6 GitHub account with repository access GitHub Actions enabled (default for public repos) ArgoCD \u00b6 1 2 3 4 5 6 7 # Install ArgoCD using kubectl kubectl create namespace argocd kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml # Or using Helm (recommended) helm repo add argo https://argoproj.github.io/argo-helm helm install argocd argo/argo-cd -n argocd --create-namespace \ud83d\udd27 Installation Instructions \u00b6 1. Install Docker \u00b6 Ubuntu/Debian \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # Update package index sudo apt update # Install dependencies sudo apt install -y apt-transport-https ca-certificates curl gnupg lsb-release # Add Docker GPG key curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg # Add Docker repository echo \"deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $( lsb_release -cs ) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null # Install Docker sudo apt update sudo apt install -y docker-ce docker-ce-cli containerd.io # Add user to docker group sudo usermod -aG docker $USER newgrp docker # Verify installation docker --version docker run hello-world macOS \u00b6 1 2 3 4 5 # Using Homebrew brew install --cask docker # Or download from Docker website # https://docs.docker.com/desktop/mac/install/ Windows (WSL2) \u00b6 1 2 3 4 5 # Install Docker Desktop for Windows # Enable WSL2 backend in Docker Desktop settings # Install Docker in WSL2: curl -fsSL https://get.docker.com -o get-docker.sh sh get-docker.sh 2. Install kubectl \u00b6 Using curl \u00b6 1 2 3 4 5 6 7 8 9 # Linux curl -LO \"https://dl.k8s.io/release/ $( curl -L -s https://dl.k8s.io/release/stable.txt ) /bin/linux/amd64/kubectl\" chmod +x kubectl sudo mv kubectl /usr/local/bin/ # macOS curl -LO \"https://dl.k8s.io/release/ $( curl -L -s https://dl.k8s.io/release/stable.txt ) /bin/darwin/amd64/kubectl\" chmod +x kubectl sudo mv kubectl /usr/local/bin/ Using Package Managers \u00b6 1 2 3 4 5 6 7 8 9 10 # macOS with Homebrew brew install kubectl # Ubuntu/Debian sudo apt update sudo apt install -y apt-transport-https ca-certificates curl sudo curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg echo \"deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main\" | sudo tee /etc/apt/sources.list.d/kubernetes.list sudo apt update sudo apt install -y kubectl Verify Installation \u00b6 1 2 kubectl version --client kubectl cluster-info 3. Install Git \u00b6 1 2 3 4 5 6 7 8 9 10 11 # Ubuntu/Debian sudo apt install -y git # CentOS/RHEL sudo yum install -y git # macOS brew install git # Verify git --version \ud83d\ude80 Kubernetes Cluster Setup \u00b6 Minikube Setup (Recommended) \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # Install Minikube curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 sudo install minikube-linux-amd64 /usr/local/bin/minikube # Start cluster with adequate resources minikube start \\ --memory = 4096 \\ --cpus = 2 \\ --disk-size = 20gb \\ --driver = docker # Enable useful addons minikube addons enable ingress minikube addons enable dashboard minikube addons enable metrics-server # Verify cluster kubectl get nodes kubectl get pods -A Alternative: Kind (Kubernetes in Docker) \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 # Install Kind curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64 chmod +x ./kind sudo mv ./kind /usr/local/bin/kind # Create cluster cat <<EOF | kind create cluster --config=- kind: Cluster apiVersion: kind.x-k8s.io/v1alpha4 nodes: - role: control-plane kubeadmConfigPatches: - | kind: InitConfiguration nodeRegistration: kubeletExtraArgs: node-labels: \"ingress-ready=true\" extraPortMappings: - containerPort: 80 hostPort: 80 protocol: TCP - containerPort: 443 hostPort: 443 protocol: TCP EOF # Verify kubectl cluster-info --context kind-kind \ud83c\udfaf ArgoCD Installation \u00b6 Method 1: Official Manifests \u00b6 1 2 3 4 5 6 7 8 9 10 11 # Create namespace kubectl create namespace argocd # Install ArgoCD kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml # Wait for pods to be ready kubectl wait --for = condition = available --timeout = 300s deployment/argocd-server -n argocd # Get initial admin password kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath = \"{.data.password}\" | base64 -d ; echo Method 2: Helm (Recommended) \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 # Add Helm repository helm repo add argo https://argoproj.github.io/argo-helm helm repo update # Install ArgoCD with custom values cat > argocd-values.yaml <<EOF server: service: type: LoadBalancer config: repositories: | - url: https://github.com/Portfolio-jaime/GitOps.git type: git EOF # Install helm install argocd argo/argo-cd \\ -n argocd \\ --create-namespace \\ -f argocd-values.yaml \\ --wait # Get admin password kubectl -n argocd get secret argocd-initial-admin-secret \\ -o jsonpath = \"{.data.password}\" | base64 -d ; echo Access ArgoCD UI \u00b6 1 2 3 4 5 6 7 8 9 # Port forward to access UI kubectl port-forward svc/argocd-server -n argocd 8080 :443 & # Or with Minikube minikube service argocd-server -n argocd # Access at: https://localhost:8080 # Username: admin # Password: (from previous step) \ud83d\udd10 Container Registry Setup \u00b6 Docker Hub (Free Option) \u00b6 1 2 3 4 5 6 7 # Create account at https://hub.docker.com # Login from command line docker login # Test push (optional) docker tag hello-world yourusername/hello-world docker push yourusername/hello-world GitHub Container Registry (Recommended) \u00b6 1 2 3 4 5 6 7 8 # Create Personal Access Token with packages:write scope # https://github.com/settings/tokens # Login to GitHub Container Registry echo $GITHUB_TOKEN | docker login ghcr.io -u yourusername --password-stdin # Test access docker pull ghcr.io/yourusername/test:latest Alternative: Local Registry \u00b6 1 2 3 4 5 6 7 8 9 10 11 # Start local registry for testing docker run -d -p 5000 :5000 --restart = always --name registry registry:2 # Configure Docker daemon to use insecure registry # Add to /etc/docker/daemon.json: { \"insecure-registries\" : [ \"localhost:5000\" ] } # Restart Docker sudo systemctl restart docker \ud83d\udd11 GitHub Setup \u00b6 Repository Access \u00b6 Fork or Clone : Fork the GitOps repository or create your own Access Tokens : Create GitHub Personal Access Token Go to GitHub Settings \u2192 Developer settings \u2192 Personal access tokens Generate token with repo and workflow scopes GitHub Actions Secrets \u00b6 Configure the following secrets in your repository: - DOCKER_USERNAME : Docker Hub username - DOCKER_PASSWORD : Docker Hub password or token - KUBE_CONFIG : Base64 encoded kubeconfig (for external clusters) 1 2 # Encode kubeconfig for GitHub secrets cat ~/.kube/config | base64 -w 0 \ud83e\uddea Verification \u00b6 Pre-flight Checklist \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 # 1. Docker is running docker --version docker ps # 2. Kubernetes cluster is accessible kubectl cluster-info kubectl get nodes # 3. ArgoCD is installed and running kubectl get pods -n argocd kubectl get svc -n argocd # 4. Git is configured git --version git config --list # 5. Container registry access docker login Test GitOps Workflow \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # 1. Clone the repository git clone https://github.com/Portfolio-jaime/GitOps.git cd GitOps # 2. Build and test Docker image docker build -t test-gitops Docker/ docker run -p 8080 :80 test-gitops & curl http://localhost:8080 docker stop $( docker ps -q --filter ancestor = test-gitops ) # 3. Test Kubernetes deployment kubectl apply -f Kubernetes/ kubectl get pods kubectl get svc # 4. Cleanup test deployment kubectl delete -f Kubernetes/ \u26a0\ufe0f Common Issues \u00b6 Docker Permission Issues \u00b6 1 2 3 4 5 6 # Add user to docker group sudo usermod -aG docker $USER newgrp docker # Or run with sudo (not recommended) sudo docker ps Kubernetes Connection Issues \u00b6 1 2 3 4 5 6 7 8 9 10 # Check kubeconfig kubectl config view kubectl config current-context # For Minikube minikube status minikube start # Verify cluster access kubectl auth can-i get pods ArgoCD Access Issues \u00b6 1 2 3 4 5 6 7 8 # Check ArgoCD pods kubectl get pods -n argocd # Reset admin password kubectl -n argocd patch secret argocd-secret \\ -p '{\"stringData\": {\"admin.password\": \"$2a$10$rRyBsGSHK6.uc8fntPwVIuLVHgsAhAX7TcdrqW/RADU0uh7CaChLa\",\"admin.passwordMtime\": \"' $( date +%FT%T%Z ) '\"}}' # New password is: password \ud83d\udcda Additional Resources \u00b6 Documentation \u00b6 Docker Documentation Kubernetes Documentation ArgoCD Documentation GitHub Actions Documentation Tutorials \u00b6 Kubernetes Basics ArgoCD Getting Started GitHub Actions Quickstart Tools \u00b6 Minikube Kind Docker Desktop Helm \u2705 Once you've completed these prerequisites, you're ready to proceed with the Setup Guide !","title":"Prerequisites"},{"location":"prerequisites/#prerequisites","text":"Requirements and setup needed before running the GitOps demo project.","title":"Prerequisites"},{"location":"prerequisites/#system-requirements","text":"","title":"\ud83d\udda5\ufe0f System Requirements"},{"location":"prerequisites/#hardware-requirements","text":"CPU : 2+ cores (4+ recommended) RAM : 4GB minimum (8GB recommended) Storage : 10GB available space Network : Internet connection for downloading images","title":"Hardware Requirements"},{"location":"prerequisites/#operating-system-support","text":"Linux : Ubuntu 18.04+, CentOS 7+, Debian 9+ macOS : 10.14 Mojave or later Windows : Windows 10 with WSL2","title":"Operating System Support"},{"location":"prerequisites/#required-tools","text":"","title":"\ud83d\udee0\ufe0f Required Tools"},{"location":"prerequisites/#essential-tools","text":"Tool Version Purpose Installation Docker 20.0+ Container runtime Docker Install kubectl 1.25+ Kubernetes CLI kubectl Install Git 2.20+ Version control Git Install","title":"Essential Tools"},{"location":"prerequisites/#kubernetes-cluster","text":"Choose one of the following options:","title":"Kubernetes Cluster"},{"location":"prerequisites/#option-1-minikube-recommended-for-demo","text":"1 2 3 4 5 6 7 # Install Minikube curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 sudo install minikube-linux-amd64 /usr/local/bin/minikube # Start cluster minikube start --memory = 4096 --cpus = 2 minikube status","title":"Option 1: Minikube (Recommended for Demo)"},{"location":"prerequisites/#option-2-docker-desktop","text":"1 2 3 # Enable Kubernetes in Docker Desktop # Settings \u2192 Kubernetes \u2192 Enable Kubernetes kubectl cluster-info","title":"Option 2: Docker Desktop"},{"location":"prerequisites/#option-3-cloud-kubernetes","text":"EKS (AWS): EKS Getting Started GKE (Google): GKE Quickstart AKS (Azure): AKS Quickstart","title":"Option 3: Cloud Kubernetes"},{"location":"prerequisites/#cicd-tools","text":"","title":"CI/CD Tools"},{"location":"prerequisites/#github-actions-included","text":"GitHub account with repository access GitHub Actions enabled (default for public repos)","title":"GitHub Actions (Included)"},{"location":"prerequisites/#argocd","text":"1 2 3 4 5 6 7 # Install ArgoCD using kubectl kubectl create namespace argocd kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml # Or using Helm (recommended) helm repo add argo https://argoproj.github.io/argo-helm helm install argocd argo/argo-cd -n argocd --create-namespace","title":"ArgoCD"},{"location":"prerequisites/#installation-instructions","text":"","title":"\ud83d\udd27 Installation Instructions"},{"location":"prerequisites/#1-install-docker","text":"","title":"1. Install Docker"},{"location":"prerequisites/#ubuntudebian","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # Update package index sudo apt update # Install dependencies sudo apt install -y apt-transport-https ca-certificates curl gnupg lsb-release # Add Docker GPG key curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg # Add Docker repository echo \"deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $( lsb_release -cs ) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null # Install Docker sudo apt update sudo apt install -y docker-ce docker-ce-cli containerd.io # Add user to docker group sudo usermod -aG docker $USER newgrp docker # Verify installation docker --version docker run hello-world","title":"Ubuntu/Debian"},{"location":"prerequisites/#macos","text":"1 2 3 4 5 # Using Homebrew brew install --cask docker # Or download from Docker website # https://docs.docker.com/desktop/mac/install/","title":"macOS"},{"location":"prerequisites/#windows-wsl2","text":"1 2 3 4 5 # Install Docker Desktop for Windows # Enable WSL2 backend in Docker Desktop settings # Install Docker in WSL2: curl -fsSL https://get.docker.com -o get-docker.sh sh get-docker.sh","title":"Windows (WSL2)"},{"location":"prerequisites/#2-install-kubectl","text":"","title":"2. Install kubectl"},{"location":"prerequisites/#using-curl","text":"1 2 3 4 5 6 7 8 9 # Linux curl -LO \"https://dl.k8s.io/release/ $( curl -L -s https://dl.k8s.io/release/stable.txt ) /bin/linux/amd64/kubectl\" chmod +x kubectl sudo mv kubectl /usr/local/bin/ # macOS curl -LO \"https://dl.k8s.io/release/ $( curl -L -s https://dl.k8s.io/release/stable.txt ) /bin/darwin/amd64/kubectl\" chmod +x kubectl sudo mv kubectl /usr/local/bin/","title":"Using curl"},{"location":"prerequisites/#using-package-managers","text":"1 2 3 4 5 6 7 8 9 10 # macOS with Homebrew brew install kubectl # Ubuntu/Debian sudo apt update sudo apt install -y apt-transport-https ca-certificates curl sudo curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg echo \"deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main\" | sudo tee /etc/apt/sources.list.d/kubernetes.list sudo apt update sudo apt install -y kubectl","title":"Using Package Managers"},{"location":"prerequisites/#verify-installation","text":"1 2 kubectl version --client kubectl cluster-info","title":"Verify Installation"},{"location":"prerequisites/#3-install-git","text":"1 2 3 4 5 6 7 8 9 10 11 # Ubuntu/Debian sudo apt install -y git # CentOS/RHEL sudo yum install -y git # macOS brew install git # Verify git --version","title":"3. Install Git"},{"location":"prerequisites/#kubernetes-cluster-setup","text":"","title":"\ud83d\ude80 Kubernetes Cluster Setup"},{"location":"prerequisites/#minikube-setup-recommended","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # Install Minikube curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 sudo install minikube-linux-amd64 /usr/local/bin/minikube # Start cluster with adequate resources minikube start \\ --memory = 4096 \\ --cpus = 2 \\ --disk-size = 20gb \\ --driver = docker # Enable useful addons minikube addons enable ingress minikube addons enable dashboard minikube addons enable metrics-server # Verify cluster kubectl get nodes kubectl get pods -A","title":"Minikube Setup (Recommended)"},{"location":"prerequisites/#alternative-kind-kubernetes-in-docker","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 # Install Kind curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64 chmod +x ./kind sudo mv ./kind /usr/local/bin/kind # Create cluster cat <<EOF | kind create cluster --config=- kind: Cluster apiVersion: kind.x-k8s.io/v1alpha4 nodes: - role: control-plane kubeadmConfigPatches: - | kind: InitConfiguration nodeRegistration: kubeletExtraArgs: node-labels: \"ingress-ready=true\" extraPortMappings: - containerPort: 80 hostPort: 80 protocol: TCP - containerPort: 443 hostPort: 443 protocol: TCP EOF # Verify kubectl cluster-info --context kind-kind","title":"Alternative: Kind (Kubernetes in Docker)"},{"location":"prerequisites/#argocd-installation","text":"","title":"\ud83c\udfaf ArgoCD Installation"},{"location":"prerequisites/#method-1-official-manifests","text":"1 2 3 4 5 6 7 8 9 10 11 # Create namespace kubectl create namespace argocd # Install ArgoCD kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml # Wait for pods to be ready kubectl wait --for = condition = available --timeout = 300s deployment/argocd-server -n argocd # Get initial admin password kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath = \"{.data.password}\" | base64 -d ; echo","title":"Method 1: Official Manifests"},{"location":"prerequisites/#method-2-helm-recommended","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 # Add Helm repository helm repo add argo https://argoproj.github.io/argo-helm helm repo update # Install ArgoCD with custom values cat > argocd-values.yaml <<EOF server: service: type: LoadBalancer config: repositories: | - url: https://github.com/Portfolio-jaime/GitOps.git type: git EOF # Install helm install argocd argo/argo-cd \\ -n argocd \\ --create-namespace \\ -f argocd-values.yaml \\ --wait # Get admin password kubectl -n argocd get secret argocd-initial-admin-secret \\ -o jsonpath = \"{.data.password}\" | base64 -d ; echo","title":"Method 2: Helm (Recommended)"},{"location":"prerequisites/#access-argocd-ui","text":"1 2 3 4 5 6 7 8 9 # Port forward to access UI kubectl port-forward svc/argocd-server -n argocd 8080 :443 & # Or with Minikube minikube service argocd-server -n argocd # Access at: https://localhost:8080 # Username: admin # Password: (from previous step)","title":"Access ArgoCD UI"},{"location":"prerequisites/#container-registry-setup","text":"","title":"\ud83d\udd10 Container Registry Setup"},{"location":"prerequisites/#docker-hub-free-option","text":"1 2 3 4 5 6 7 # Create account at https://hub.docker.com # Login from command line docker login # Test push (optional) docker tag hello-world yourusername/hello-world docker push yourusername/hello-world","title":"Docker Hub (Free Option)"},{"location":"prerequisites/#github-container-registry-recommended","text":"1 2 3 4 5 6 7 8 # Create Personal Access Token with packages:write scope # https://github.com/settings/tokens # Login to GitHub Container Registry echo $GITHUB_TOKEN | docker login ghcr.io -u yourusername --password-stdin # Test access docker pull ghcr.io/yourusername/test:latest","title":"GitHub Container Registry (Recommended)"},{"location":"prerequisites/#alternative-local-registry","text":"1 2 3 4 5 6 7 8 9 10 11 # Start local registry for testing docker run -d -p 5000 :5000 --restart = always --name registry registry:2 # Configure Docker daemon to use insecure registry # Add to /etc/docker/daemon.json: { \"insecure-registries\" : [ \"localhost:5000\" ] } # Restart Docker sudo systemctl restart docker","title":"Alternative: Local Registry"},{"location":"prerequisites/#github-setup","text":"","title":"\ud83d\udd11 GitHub Setup"},{"location":"prerequisites/#repository-access","text":"Fork or Clone : Fork the GitOps repository or create your own Access Tokens : Create GitHub Personal Access Token Go to GitHub Settings \u2192 Developer settings \u2192 Personal access tokens Generate token with repo and workflow scopes","title":"Repository Access"},{"location":"prerequisites/#github-actions-secrets","text":"Configure the following secrets in your repository: - DOCKER_USERNAME : Docker Hub username - DOCKER_PASSWORD : Docker Hub password or token - KUBE_CONFIG : Base64 encoded kubeconfig (for external clusters) 1 2 # Encode kubeconfig for GitHub secrets cat ~/.kube/config | base64 -w 0","title":"GitHub Actions Secrets"},{"location":"prerequisites/#verification","text":"","title":"\ud83e\uddea Verification"},{"location":"prerequisites/#pre-flight-checklist","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 # 1. Docker is running docker --version docker ps # 2. Kubernetes cluster is accessible kubectl cluster-info kubectl get nodes # 3. ArgoCD is installed and running kubectl get pods -n argocd kubectl get svc -n argocd # 4. Git is configured git --version git config --list # 5. Container registry access docker login","title":"Pre-flight Checklist"},{"location":"prerequisites/#test-gitops-workflow","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # 1. Clone the repository git clone https://github.com/Portfolio-jaime/GitOps.git cd GitOps # 2. Build and test Docker image docker build -t test-gitops Docker/ docker run -p 8080 :80 test-gitops & curl http://localhost:8080 docker stop $( docker ps -q --filter ancestor = test-gitops ) # 3. Test Kubernetes deployment kubectl apply -f Kubernetes/ kubectl get pods kubectl get svc # 4. Cleanup test deployment kubectl delete -f Kubernetes/","title":"Test GitOps Workflow"},{"location":"prerequisites/#common-issues","text":"","title":"\u26a0\ufe0f Common Issues"},{"location":"prerequisites/#docker-permission-issues","text":"1 2 3 4 5 6 # Add user to docker group sudo usermod -aG docker $USER newgrp docker # Or run with sudo (not recommended) sudo docker ps","title":"Docker Permission Issues"},{"location":"prerequisites/#kubernetes-connection-issues","text":"1 2 3 4 5 6 7 8 9 10 # Check kubeconfig kubectl config view kubectl config current-context # For Minikube minikube status minikube start # Verify cluster access kubectl auth can-i get pods","title":"Kubernetes Connection Issues"},{"location":"prerequisites/#argocd-access-issues","text":"1 2 3 4 5 6 7 8 # Check ArgoCD pods kubectl get pods -n argocd # Reset admin password kubectl -n argocd patch secret argocd-secret \\ -p '{\"stringData\": {\"admin.password\": \"$2a$10$rRyBsGSHK6.uc8fntPwVIuLVHgsAhAX7TcdrqW/RADU0uh7CaChLa\",\"admin.passwordMtime\": \"' $( date +%FT%T%Z ) '\"}}' # New password is: password","title":"ArgoCD Access Issues"},{"location":"prerequisites/#additional-resources","text":"","title":"\ud83d\udcda Additional Resources"},{"location":"prerequisites/#documentation","text":"Docker Documentation Kubernetes Documentation ArgoCD Documentation GitHub Actions Documentation","title":"Documentation"},{"location":"prerequisites/#tutorials","text":"Kubernetes Basics ArgoCD Getting Started GitHub Actions Quickstart","title":"Tutorials"},{"location":"prerequisites/#tools","text":"Minikube Kind Docker Desktop Helm \u2705 Once you've completed these prerequisites, you're ready to proceed with the Setup Guide !","title":"Tools"}]}